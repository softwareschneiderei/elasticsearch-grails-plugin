import java.util.regex.Matcher

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm-pdf:$asciidoctorVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm-epub:$asciidoctorVersion"
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath "org.grails.plugins:hibernate5:${gormHibernateVersion-".RELEASE"}"
        classpath "de.undercouch:gradle-download-task:5.6.0"
    }
}

version "4.0.0.SWS-1"
group "org.grails.plugins"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-plugin"
//apply plugin: "org.grails.internal.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: "de.undercouch.download"
apply plugin: "java-library"
apply plugin: "maven-publish"

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

jar {
    exclude "test/**"
    exclude "test/**/**"
}

groovydoc {
    exclude "test/**"
    exclude "test/**/**"
}

sourcesJar {
    exclude "test/**"
    exclude "test/**/**"
    archiveClassifier.set('sources')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-dependencies"

    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-domain-class"

    implementation "org.grails:grails-core"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:cache"
    implementation "org.hibernate:hibernate-ehcache"
    implementation "org.apache.logging.log4j:log4j-api:2.24.3"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.24.3'
    implementation 'io.github.virtualdogbert:logback-groovy-config:1.12.5'

    api "org.elasticsearch:elasticsearch:${elasticsearchVersion}"
    api group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: elasticsearchVersion
    api group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: elasticsearchVersion
    implementation 'org.locationtech.spatial4j:spatial4j:0.8'

    console "org.grails:grails-console"

    profile "org.grails.profiles:web-plugin"

    testRuntimeOnly 'org.apache.tomcat:tomcat-jdbc'

    testCompileOnly "org.grails:grails-web-testing-support"
    testCompileOnly 'org.locationtech.jts:jts-core:1.20.0'
    testCompileOnly 'com.googlecode.json-simple:json-simple:1.1.1'

    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.spockframework:spock-core"

    constraints {
        add('implementation', 'com.fasterxml.jackson.core:jackson-databind:2.18.3') {
            because '2.9.10.5 from spatial4j has vulnerabilities'
        }
    }
}

task cleanLibsDir(type: Delete) {
    delete fileTree(dir: 'libs')
}

check.finalizedBy("cleanDataDir")
clean.finalizedBy("cleanDataDir", "cleanLibsDir")

task cleanDataDir(type: Delete) {
    delete fileTree(dir: 'data')
}

tasks.withType(Test) {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet " -- Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    testLogging {
        events "passed", "skipped", "failed"//, "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

// Workaround for https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/257
tasks.withType(GenerateMavenPom).all {
    doLast {
        File file = new File("$buildDir/publications/maven/pom-default.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    sourceResources sourceSets.main
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

apply from: "gradle/documentation.gradle"

grails {
    pathingJar = true
}

tasks.withType(Test) {
    useJUnitPlatform()
}


publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "Elasticsearch Grails Plugin"
                description = "An Elasticsearch plugin for Grails"

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "puneet"
                        name = 'Puneet Behl'
                    }
                    developer {
                        id = "noam"
                        name = 'Noam Y. Tenne'
                    }
                    developer {
                        id = "macrcos"
                        name = 'Marcos Carceles'
                    }
                    developer {
                        id = "james"
                        name = 'James Kleeh'
                    }
                    developer {
                        id = "cgoit"
                        name ='Carsten GÃ¶tzinger'
                    }
                    developer {
                        id = "miq"
                        name = 'Mihael Koep'
                        email = 'mihael.koep@softwareschneiderei.de'
                    }
                }
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            from components.java
            repositories {
                maven {
                    credentials {
                        username "$mavenUser"
                        password "$mavenPassword"
                    }
                    url "$mavenUrl"
                }
            }
        }
    }
}
